1. Join platoon
- Send the msg to join to LeadingTruck -> Authentication  - done
- Joining msg (....)
- LEading cal -> Ok -> sync(gps,xxx) 
                -> slow down, new truck is joining 

- Following -> distance_cal() -> sysnc ok -> Leading 
                -> status -> Leading.

- Leading -> update trucks info 

- LEading -> 

1.5 Normal operation 
- Send msg (info), period T t(s) 
- Check EMG condition via TCP/UDP 

2. Leave Platoon 
- Send the msg to leave to LeadingTruck 

- LEading cal -> OK you can leave -> sync(gps,xxx) 
                -> other trucks ->  slow down, new truck is leaving 
- Following trucks -> preparetoLeave(data) -> turn on turing -> Leave success -> close socket

- Leading -> upadate trucks info 

-Following -> cal() -> sysnc ok -> Leading 

3. Emergency Brake 
- Query data -> broadcast to all trucks using UDP  (backup)
- Sent directly to trucks using TCP 

4. Obstacle avoidancce (car acrosses the platoon)
- Trucks found Obstacle -> send to LeadingTruck
- LEadingtruck cal -> send to other trucks 
                    -> slow down

{
    "truck_id":"aaaa",
    "cmd":"auth", //auth,leave,join,communicate,emergency,obstacle
    "contents": {
        "location":{
            "lat": 37.7749,
            "lon": -122.4194
        },
        "distance":{
            "front": 10,
            "back": 10,
            "lead": 10
        },
        "speed": 60,
        "status": "normal", //running, stopped, emergency, error
        "brake_force": 0, //0.0 -> 1.0
        "error_code": "ER001"
    }
    "msg_id":uuid,
    "timestamp":timestamp
}

TODO: Define commands, parse class


private class MsgFrame {
    private: 

    public: 
        get_type:

} 
